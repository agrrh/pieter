#!/usr/bin/env python3

import sys
import os
import subprocess
import yaml

from sanic import Sanic
from sanic import response

DATA_STRUCT = {
    'repos': {}
}

def data_load(path='./data.yml'):
    if not os.path.exists(path):
        with open(path, 'a') as fp:
            fp.write(yaml.dump(DATA_STRUCT, default_flow_style=False))
        result = DATA_STRUCT
    else:
        with open(path, 'r') as fp:
            result = yaml.load(fp)
    return result

def data_save(path='./data.yml', data={}):
    with open(path, 'w') as fp:
        result = fp.write(yaml.dump(data, default_flow_style=False))
    return result

app = Sanic()

@app.route("/")
async def index(request):
    return response.json(None)

@app.route("/repos", methods=['GET', 'PUT', 'DELETE'])
async def index(request):
    data = data_load()

    if request.method == 'GET':
        if not request.json or 'name' not in request.json:
            code = 200
            result = data['repos']
        else:
            name = request.json['name']

            if name not in data['repos']:
                code = 404
                result = None
            else:
                code = 200
                result = data['repos'][name]

    elif request.method == 'PUT':
        if not request.json or (
            'name' not in request.json or
            'source' not in request.json
        ):
            code = 400
            result = {'example': {
                'name': 'name',
                'source': 'git@github.com/user/repo.git'
            }}
        else:
            data = data_load()
            name = request.json['name']
            source = request.json['source']

            repo_old = data['repos'][name] if name in data['repos'] else None

            repo_new = {
                'name': name,
                'source': source
            }

            if repo_new == repo_old:
                code = 200
            else:
                data['repos'][name] = repo_new
                data_save(data=data)
                code = 201

            result = {
                'old': repo_old,
                'new': repo_new
            }

    elif request.method == 'DELETE':
        if not request.json or 'name' not in request.json:
            code = 400
            result = {'example': {'name': 'repo_name'}}
        else:
            data = data_load()
            name = request.json['name']

            if name not in data['repos']:
                code = 404
                result = None
            else:
                code = 200
                result = {
                    'old': data['repos'][name],
                    'new': None
                }
                data['repos'].pop(name, None)
                data_save(data=data)

    return response.json(result, status=code)

@app.route("/hooks/<name>/<scenario>")
async def hook(request, name, scenario):
    result = {
        'name': name,
        'scenario': scenario
    }
    return response.json(result)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)
