#!/usr/bin/env python3

import sys
import os
import subprocess
import yaml

from sanic import Sanic
from sanic import response

from lib.repository import Repository
from lib.scenario import Scenario
from lib.job import Job


DATA_STRUCT = {
    'repos': {}
}

def data_load(path='./data.yml'):
    if not os.path.exists(path):
        with open(path, 'a') as fp:
            fp.write(yaml.dump(DATA_STRUCT, default_flow_style=False))
        result = DATA_STRUCT
    else:
        with open(path, 'r') as fp:
            result = yaml.load(fp)
    return result

def data_save(path='./data.yml', data={}):
    with open(path, 'w') as fp:
        result = fp.write(yaml.dump(data, default_flow_style=False))
    return result

app = Sanic()

@app.route("/")
async def index(request):
    result = response.json((
        'GET /repos',                       # Get repos list
        'PUT /repos/<name>',                # Create/update repo
        'DELETE /repos/<name>',             # Delete particular repo

        'PUT /repos/<name>/<scenario>',     # Create/update scenario for repo
        'GET /repos/<name>/<scenario>',     # Get scenario info
        'DELETE /repos/<name>/<scenario>',  # Delete scenario

        'PATCH /repos/<name>/<scenario>',   # Execute scenario

        'POST /hooks/<repo>/<scenario>',     # Almost the same, execute scenario
                                            # POST used for compability with VCS webhooks
                                            # Also, note 'hooks' part

        'GET /jobs/<uuid>'                  # Check job status
    ))
    return result

@app.route("/repos", methods=['GET'])
async def repos_index(request):
    data = data_load()
    return response.json(data['repos'])

@app.route("/repos/<repo_name>", methods=['GET', 'PUT', 'DELETE'])
async def repo_actions(request, repo_name):
    repo = Repository(repo_name)

    if request.method == 'GET':
        if not repo.exists:  # FIXME use classes
            result = response.json(None, status=404)
        else:
            result = response.json(repo.read())

    elif request.method == 'PUT':
        if not request.json or 'source' not in request.json:
            result = response.json('Provide "source" with git URL', status=400)
        else:
            source = request.json['source']

            repo_old = repo.read()
            repo.update(source)
            repo_new = repo.read()

            code = 200 if repo_new == repo_old else 201

            result = response.json(repo_new, status=code)

    elif request.method == 'DELETE':
        if not repo.exists:
            result = response.json(None, status=404)
        else:
            repo.delete()
            result = response.json(repo.read())

    return result

@app.route("/repos/<repo_name>/<scenario_name>", methods=['PUT', 'GET', 'DELETE', 'PATCH'])
async def scenario_actions(request, repo_name, scenario_name):
    repo = Repository(repo_name)
    scenario = Scenario(repo, scenario_name)

    if request.method == 'PUT':
        if len(request.body) < 4 or len(request.body) > 10240:
            result = response.json('File size do not match sane limits', status=400)
        else:
            scenario.update(request.body)
            result = response.json(scenario.read(), status=201)

    elif request.method == 'GET':
        if not scenario.exists:
            result = response.json(None, status=404)
        else:
            result = response.json(scenario.read())

    elif request.method == 'DELETE':
        if scenario.exists:
            scenario.delete()
            result = response.json(scenario.read())
        else:
            result = response.json(None, status=404)

    elif request.method == 'PATCH':
        job = Job()
        job.create(scenario.path)

        result = response.json(job.read(), status=201)

    return result

@app.route("/jobs/<job_name>", methods=['GET', 'DELETE'])
async def job_actions(request, job_name):
    job = Job(name=job_name)
    if request.method == 'GET':
        if job.rc is None:
            result = response.json(None, status=404)
        else:
            result = response.json(job.read())
    elif request.method == 'DELETE':
        if job.state is None:
            result = response.json(None, status=404)
        else:
            job.delete()
            result = response.json(job.read())

    return result

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)
